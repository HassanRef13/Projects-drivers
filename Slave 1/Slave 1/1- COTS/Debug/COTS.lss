
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000cf4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800084  00800084  00000dac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fba  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001336  00000000  00000000  00004017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00005350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d9  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001282  00000000  00000000  000062c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_6>
  1c:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_15>
  40:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3c       	cpi	r26, 0xC7	; 199
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
{
	
	/*************** Slave 1 ***************/
	uint16 distance = 0 ;
	uint16 Rec = 0 ;
	PORT_Init();
  92:	0e 94 52 04 	call	0x8a4	; 0x8a4 <PORT_Init>
	SPI_Init();
  96:	0e 94 d6 04 	call	0x9ac	; 0x9ac <SPI_Init>
	LCD_Init();
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_Init>
	GPT_Init();	 
  9e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <GPT_Init>
	IRQH_SetGlobalINT(INT_ENABLE);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <IRQH_SetGlobalINT>
	Ultrasonic_Init();
  a8:	0e 94 cc 01 	call	0x398	; 0x398 <Ultrasonic_Init>
	Ultrasonic_Trigger();
  ac:	0e 94 cf 01 	call	0x39e	; 0x39e <Ultrasonic_Trigger>
	
	
    while (1) 
    {
		distance = Ultrasonic_Get_Distance();
  b0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Ultrasonic_Get_Distance>
  b4:	ec 01       	movw	r28, r24
		
		if(distance > 0)
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	d9 f3       	breq	.-10     	; 0xb0 <main+0x1e>
		{
			Rec = SPI_TranSiever(distance);
  ba:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_TranSiever>
			LCD_WriteInteger(distance);
  be:	be 01       	movw	r22, r28
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_WriteInteger>
			LCD_WriteString(" Cm");
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	80 e7       	ldi	r24, 0x70	; 112
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4e>
  e0:	00 00       	nop
			_delay_ms(50);
			LCD_WriteClear();
  e2:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_WriteClear>
			

			Ultrasonic_Trigger();
  e6:	0e 94 cf 01 	call	0x39e	; 0x39e <Ultrasonic_Trigger>
  ea:	e2 cf       	rjmp	.-60     	; 0xb0 <main+0x1e>

000000ec <LCD_WriteCommand>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteCommand(uint8 cmd)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
// 	uint8 old_value = 0 , New_value = 0;

	DIO_WriteChannel(LCD_RS_PIN,PIN_LOW);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>

	#if (LCD_MODE==LCD_4BIT_MODE)
	
	DIO_WriteChannel(LCD_D4_PIN,GET_BIT(cmd,4));	
 100:	c4 fb       	bst	r28, 4
 102:	66 27       	eor	r22, r22
 104:	60 f9       	bld	r22, 0
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN,GET_BIT(cmd,5));
 10c:	c5 fb       	bst	r28, 5
 10e:	66 27       	eor	r22, r22
 110:	60 f9       	bld	r22, 0
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN,GET_BIT(cmd,6));
 118:	c6 fb       	bst	r28, 6
 11a:	66 27       	eor	r22, r22
 11c:	60 f9       	bld	r22, 0
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN,GET_BIT(cmd,7));
 124:	6c 2f       	mov	r22, r28
 126:	66 1f       	adc	r22, r22
 128:	66 27       	eor	r22, r22
 12a:	66 1f       	adc	r22, r22
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
// 	New_value = ((cmd>>1) & DATA_MASK) | (old_value & DATA_PORT_MASK);
// 	DIO_WritePort(LCD_D4_PIN,New_value);*/
	
	
	
	DIO_WriteChannel(LCD_E_PIN,PIN_HIGH);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_WriteCommand+0x52>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_WriteCommand+0x58>
 144:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_D4_PIN,GET_BIT(cmd,0));
 14e:	6c 2f       	mov	r22, r28
 150:	61 70       	andi	r22, 0x01	; 1
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN,GET_BIT(cmd,1));
 158:	c1 fb       	bst	r28, 1
 15a:	66 27       	eor	r22, r22
 15c:	60 f9       	bld	r22, 0
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN,GET_BIT(cmd,2));
 164:	c2 fb       	bst	r28, 2
 166:	66 27       	eor	r22, r22
 168:	60 f9       	bld	r22, 0
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN,GET_BIT(cmd,3));
 170:	c3 fb       	bst	r28, 3
 172:	66 27       	eor	r22, r22
 174:	60 f9       	bld	r22, 0
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	New_value = ((cmd<<3)&DATA_MASK) | (old_value & DATA_PORT_MASK);
	DIO_WritePort(LCD_D4_PIN,New_value);*/
	
	
	
	DIO_WriteChannel(LCD_E_PIN,PIN_HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_WriteCommand+0x9c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_WriteCommand+0xa2>
 18e:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	9e e4       	ldi	r25, 0x4E	; 78
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_WriteCommand+0xb0>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_WriteCommand+0xb6>
 1a2:	00 00       	nop
	_delay_ms(5);
	
	#endif
	
}
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCD_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void LCD_Init(void)
{
	#if (LCD_MODE==LCD_4BIT_MODE)
		LCD_WriteCommand(0X33);
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
		LCD_WriteCommand(0X32);
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
		LCD_WriteCommand(0X28);
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>

		LCD_WriteCommand(0X0C);
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
		LCD_WriteCommand(0X01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
		
		LCD_WriteCommand(0X06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
		LCD_WriteCommand(0X02);
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
 1d2:	08 95       	ret

000001d4 <LCD_WriteChar>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteChar(uint8 chr)
{
 1d4:	cf 93       	push	r28
 1d6:	c8 2f       	mov	r28, r24
// 	uint8 old_value = 0 , New_value = 0;
	DIO_WriteChannel(LCD_RS_PIN,PIN_HIGH);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	
	#if (LCD_MODE==LCD_4BIT_MODE)
	DIO_WriteChannel(LCD_D4_PIN,GET_BIT(chr,4));
 1e8:	c4 fb       	bst	r28, 4
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D5_PIN,GET_BIT(chr,5));
 1f4:	c5 fb       	bst	r28, 5
 1f6:	66 27       	eor	r22, r22
 1f8:	60 f9       	bld	r22, 0
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D6_PIN,GET_BIT(chr,6));
 200:	c6 fb       	bst	r28, 6
 202:	66 27       	eor	r22, r22
 204:	60 f9       	bld	r22, 0
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_D7_PIN,GET_BIT(chr,7));
 20c:	6c 2f       	mov	r22, r28
 20e:	66 1f       	adc	r22, r22
 210:	66 27       	eor	r22, r22
 212:	66 1f       	adc	r22, r22
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	
	/*DIO_ReadOutPutPort(LCD_D4_PIN,&old_value);
	New_value= ((chr>>1)&DATA_MASK) | (old_value & DATA_PORT_MASK);
	DIO_WritePort(LCD_D4_PIN,New_value);*/
	
	DIO_WriteChannel(LCD_E_PIN,PIN_HIGH);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_WriteChar+0x52>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_WriteChar+0x58>
 22c:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	
	/*DIO_ReadOutPutPort(LCD_D4_PIN,&old_value);
	New_value =((chr<<3)&DATA_MASK) | (old_value & DATA_PORT_MASK);
	DIO_WritePort(LCD_D4_PIN,New_value);*/
	
	DIO_WriteChannel(LCD_D4_PIN,GET_BIT(chr,0));
 236:	6c 2f       	mov	r22, r28
 238:	61 70       	andi	r22, 0x01	; 1
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 	DIO_WriteChannel(LCD_D5_PIN,GET_BIT(chr,1));
 240:	c1 fb       	bst	r28, 1
 242:	66 27       	eor	r22, r22
 244:	60 f9       	bld	r22, 0
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 	DIO_WriteChannel(LCD_D6_PIN,GET_BIT(chr,2));
 24c:	c2 fb       	bst	r28, 2
 24e:	66 27       	eor	r22, r22
 250:	60 f9       	bld	r22, 0
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 	DIO_WriteChannel(LCD_D7_PIN,GET_BIT(chr,3));
 258:	c3 fb       	bst	r28, 3
 25a:	66 27       	eor	r22, r22
 25c:	60 f9       	bld	r22, 0
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	
	DIO_WriteChannel(LCD_E_PIN,PIN_HIGH);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_WriteChar+0x9c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_WriteChar+0xa2>
 276:	00 00       	nop
	_delay_ms(1);
	DIO_WriteChannel(LCD_E_PIN,PIN_LOW);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_WriteChar+0xb0>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_WriteChar+0xb6>
 28a:	00 00       	nop
	_delay_ms(5);
	
	#endif
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_WriteString>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* chr)
{
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	8c 01       	movw	r16, r24
	uint8 cnt = 0;
 298:	c0 e0       	ldi	r28, 0x00	; 0
	while (chr[cnt] != '\0')
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(chr[cnt]);
 29c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteChar>
		cnt++;
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteString(uint8* chr)
{
	uint8 cnt = 0;
	while (chr[cnt] != '\0')
 2a2:	f8 01       	movw	r30, r16
 2a4:	ec 0f       	add	r30, r28
 2a6:	f1 1d       	adc	r31, r1
 2a8:	80 81       	ld	r24, Z
 2aa:	81 11       	cpse	r24, r1
 2ac:	f7 cf       	rjmp	.-18     	; 0x29c <LCD_WriteString+0xc>
	{
		LCD_WriteChar(chr[cnt]);
		cnt++;
	}
}
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <LCD_WriteInteger>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 2b6:	8f 92       	push	r8
 2b8:	9f 92       	push	r9
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	6b 01       	movw	r12, r22
 2c8:	7c 01       	movw	r14, r24
	uint32 temp=1;
	if(num==0)
 2ca:	67 2b       	or	r22, r23
 2cc:	68 2b       	or	r22, r24
 2ce:	69 2b       	or	r22, r25
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <LCD_WriteInteger+0x22>
	{
		LCD_WriteChar('0');
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteChar>
	}
	if (num<0)
 2d8:	ff 20       	and	r15, r15
 2da:	5c f4       	brge	.+22     	; 0x2f2 <LCD_WriteInteger+0x3c>
	{
		LCD_WriteChar('-');
 2dc:	8d e2       	ldi	r24, 0x2D	; 45
 2de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteChar>
		num*=-1;
 2e2:	f0 94       	com	r15
 2e4:	e0 94       	com	r14
 2e6:	d0 94       	com	r13
 2e8:	c0 94       	com	r12
 2ea:	c1 1c       	adc	r12, r1
 2ec:	d1 1c       	adc	r13, r1
 2ee:	e1 1c       	adc	r14, r1
 2f0:	f1 1c       	adc	r15, r1
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteInteger(sint32 num)
{
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	24 c0       	rjmp	.+72     	; 0x344 <LCD_WriteInteger+0x8e>
		LCD_WriteChar('-');
		num*=-1;
	}
	while (num!=0)
	{
		temp =(temp *10)+(num%10);
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	4c 01       	movw	r8, r24
 30a:	5d 01       	movw	r10, r26
 30c:	88 0c       	add	r8, r8
 30e:	99 1c       	adc	r9, r9
 310:	aa 1c       	adc	r10, r10
 312:	bb 1c       	adc	r11, r11
 314:	88 0c       	add	r8, r8
 316:	99 1c       	adc	r9, r9
 318:	aa 1c       	adc	r10, r10
 31a:	bb 1c       	adc	r11, r11
 31c:	88 0e       	add	r8, r24
 31e:	99 1e       	adc	r9, r25
 320:	aa 1e       	adc	r10, r26
 322:	bb 1e       	adc	r11, r27
 324:	c7 01       	movw	r24, r14
 326:	b6 01       	movw	r22, r12
 328:	2a e0       	ldi	r18, 0x0A	; 10
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__divmodsi4>
 334:	68 0d       	add	r22, r8
 336:	79 1d       	adc	r23, r9
 338:	8a 1d       	adc	r24, r10
 33a:	9b 1d       	adc	r25, r11
		num/=10;
 33c:	c2 2e       	mov	r12, r18
 33e:	d3 2e       	mov	r13, r19
 340:	e4 2e       	mov	r14, r20
 342:	f5 2e       	mov	r15, r21
	if (num<0)
	{
		LCD_WriteChar('-');
		num*=-1;
	}
	while (num!=0)
 344:	c1 14       	cp	r12, r1
 346:	d1 04       	cpc	r13, r1
 348:	e1 04       	cpc	r14, r1
 34a:	f1 04       	cpc	r15, r1
 34c:	b9 f6       	brne	.-82     	; 0x2fc <LCD_WriteInteger+0x46>
 34e:	12 c0       	rjmp	.+36     	; 0x374 <LCD_WriteInteger+0xbe>
		temp =(temp *10)+(num%10);
		num/=10;
	}
	while(temp!=1)
	{
		LCD_WriteChar((temp%10)+48);
 350:	2a e0       	ldi	r18, 0x0A	; 10
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 35c:	c2 2e       	mov	r12, r18
 35e:	d3 2e       	mov	r13, r19
 360:	e4 2e       	mov	r14, r20
 362:	f5 2e       	mov	r15, r21
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	86 0f       	add	r24, r22
 368:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteChar>
		temp/=10;
 36c:	6c 2d       	mov	r22, r12
 36e:	7d 2d       	mov	r23, r13
 370:	8e 2d       	mov	r24, r14
 372:	9f 2d       	mov	r25, r15
	while (num!=0)
	{
		temp =(temp *10)+(num%10);
		num/=10;
	}
	while(temp!=1)
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	71 05       	cpc	r23, r1
 378:	81 05       	cpc	r24, r1
 37a:	91 05       	cpc	r25, r1
 37c:	49 f7       	brne	.-46     	; 0x350 <LCD_WriteInteger+0x9a>
	{
		LCD_WriteChar((temp%10)+48);
		temp/=10;
	}

}
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	9f 90       	pop	r9
 38c:	8f 90       	pop	r8
 38e:	08 95       	ret

00000390 <LCD_WriteClear>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WriteClear(void)
{
	LCD_WriteCommand(0X01);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteCommand>
 396:	08 95       	ret

00000398 <Ultrasonic_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Ultrasonic_Init(void)
{
	ICU_Init();
 398:	0e 94 77 02 	call	0x4ee	; 0x4ee <ICU_Init>
 39c:	08 95       	ret

0000039e <Ultrasonic_Trigger>:
*                                    E_NOT_OK
*******************************************************************************/
void Ultrasonic_Trigger(void)
{
	/*********trigger *************/
	DIO_WriteChannel(PORTC_PIN6, PIN_HIGH);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	86 e1       	ldi	r24, 0x16	; 22
 3a2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	85 e3       	ldi	r24, 0x35	; 53
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Ultrasonic_Trigger+0xa>
 3ac:	00 00       	nop
	_delay_us(10);
	DIO_WriteChannel(PORTC_PIN6, PIN_LOW);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	86 e1       	ldi	r24, 0x16	; 22
 3b2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <DIO_WriteChannel>
 3b6:	08 95       	ret

000003b8 <Ultrasonic_Get_Distance>:
uint16 Ultrasonic_Get_Distance(void)
{
	uint32 Time=0;
	uint16 Distance=0;
	
	Time = ICU_Capture_Time();
 3b8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ICU_Capture_Time>
	
	Distance = (0.034 * Time)/2;
 3bc:	0e 94 22 05 	call	0xa44	; 0xa44 <__floatunsisf>
 3c0:	26 e9       	ldi	r18, 0x96	; 150
 3c2:	33 e4       	ldi	r19, 0x43	; 67
 3c4:	4b e0       	ldi	r20, 0x0B	; 11
 3c6:	5d e3       	ldi	r21, 0x3D	; 61
 3c8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulsf3>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	5f e3       	ldi	r21, 0x3F	; 63
 3d4:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulsf3>
 3d8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fixunssfsi>
	return Distance; 
}
 3dc:	cb 01       	movw	r24, r22
 3de:	08 95       	ret

000003e0 <DIO_WriteChannel>:
*******************************************************************************/
void DIO_WriteChannel(uint8 Pin_Num , PIN_VALUE_t Pin_value )
{
	uint8 Port = 0 , Pin = 0;
	
	Port = Pin_Num / NUMBER_OF_EACH_PORT_PINS ;
 3e0:	98 2f       	mov	r25, r24
 3e2:	96 95       	lsr	r25
 3e4:	96 95       	lsr	r25
 3e6:	96 95       	lsr	r25
	Pin  = Pin_Num % NUMBER_OF_EACH_PORT_PINS ;
 3e8:	87 70       	andi	r24, 0x07	; 7
	
	switch(Pin_value)
 3ea:	66 23       	and	r22, r22
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <DIO_WriteChannel+0x10>
 3ee:	3f c0       	rjmp	.+126    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 3f0:	61 30       	cpi	r22, 0x01	; 1
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <DIO_WriteChannel+0x16>
 3f4:	7b c0       	rjmp	.+246    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
	{
		case PIN_HIGH :
		
			switch(Port)
 3f6:	91 30       	cpi	r25, 0x01	; 1
 3f8:	99 f0       	breq	.+38     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3fa:	28 f0       	brcs	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fc:	92 30       	cpi	r25, 0x02	; 2
 3fe:	e9 f0       	breq	.+58     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 400:	93 30       	cpi	r25, 0x03	; 3
 402:	41 f1       	breq	.+80     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 404:	08 95       	ret
			{
			case 0:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 406:	4b b3       	in	r20, 0x1b	; 27
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	84 2b       	or	r24, r20
 41c:	8b bb       	out	0x1b, r24	; 27
			break;
 41e:	08 95       	ret
			
			case 1:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 420:	48 b3       	in	r20, 0x18	; 24
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	84 2b       	or	r24, r20
 436:	88 bb       	out	0x18, r24	; 24
			break;
 438:	08 95       	ret
			
			case 2:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 43a:	45 b3       	in	r20, 0x15	; 21
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	84 2b       	or	r24, r20
 450:	85 bb       	out	0x15, r24	; 21
			break;
 452:	08 95       	ret
			
			case 3:
			SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 454:	42 b3       	in	r20, 0x12	; 18
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	cb 01       	movw	r24, r22
 468:	84 2b       	or	r24, r20
 46a:	82 bb       	out	0x12, r24	; 18
			break;
 46c:	08 95       	ret
			break;
			}
			break;
		case PIN_LOW :
				
		switch(Port)
 46e:	91 30       	cpi	r25, 0x01	; 1
 470:	a1 f0       	breq	.+40     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 472:	28 f0       	brcs	.+10     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 474:	92 30       	cpi	r25, 0x02	; 2
 476:	f9 f0       	breq	.+62     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 478:	93 30       	cpi	r25, 0x03	; 3
 47a:	59 f1       	breq	.+86     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 47c:	08 95       	ret
		{
			case 0:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 47e:	4b b3       	in	r20, 0x1b	; 27
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	cb 01       	movw	r24, r22
 492:	80 95       	com	r24
 494:	84 23       	and	r24, r20
 496:	8b bb       	out	0x1b, r24	; 27
			break;
 498:	08 95       	ret
			
			case 1:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 49a:	48 b3       	in	r20, 0x18	; 24
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	cb 01       	movw	r24, r22
 4ae:	80 95       	com	r24
 4b0:	84 23       	and	r24, r20
 4b2:	88 bb       	out	0x18, r24	; 24
			break;
 4b4:	08 95       	ret
			
			case 2:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 4b6:	45 b3       	in	r20, 0x15	; 21
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	cb 01       	movw	r24, r22
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	85 bb       	out	0x15, r24	; 21
			break;
 4d0:	08 95       	ret
			
			case 3:
			CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) ,Pin );
 4d2:	42 b3       	in	r20, 0x12	; 18
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	cb 01       	movw	r24, r22
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	82 bb       	out	0x12, r24	; 18
 4ec:	08 95       	ret

000004ee <ICU_Init>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void ICU_Init(void)
{	                                                
	/**** Select Rising eadge *******/
	SET_BIT(TCCR1B, 6);
 4ee:	8e b5       	in	r24, 0x2e	; 46
 4f0:	80 64       	ori	r24, 0x40	; 64
 4f2:	8e bd       	out	0x2e, r24	; 46
	/******** Set INT ON ICU ***********/
	SET_BIT(TIMSK,5); 
 4f4:	89 b7       	in	r24, 0x39	; 57
 4f6:	80 62       	ori	r24, 0x20	; 32
 4f8:	89 bf       	out	0x39, r24	; 57
 4fa:	08 95       	ret

000004fc <ICU_Capture_Time>:
*******************************************************************************/
uint32 ICU_Capture_Time(void)
{
	static uint32 ICU_time ;
	
	if (ICU_Cnt ==2)
 4fc:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <ICU_Cnt>
 500:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <ICU_Cnt+0x1>
 504:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <ICU_Cnt+0x2>
 508:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <ICU_Cnt+0x3>
 50c:	02 97       	sbiw	r24, 0x02	; 2
 50e:	a1 05       	cpc	r26, r1
 510:	b1 05       	cpc	r27, r1
 512:	09 f0       	breq	.+2      	; 0x516 <ICU_Capture_Time+0x1a>
 514:	3f c0       	rjmp	.+126    	; 0x594 <ICU_Capture_Time+0x98>
	{
		ICU_time= (CAP2 - CAP1) *64;
 516:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <CAP2>
 51a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <CAP2+0x1>
 51e:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <CAP2+0x2>
 522:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <CAP2+0x3>
 526:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <CAP1>
 52a:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <CAP1+0x1>
 52e:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <CAP1+0x2>
 532:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <CAP1+0x3>
 536:	84 1b       	sub	r24, r20
 538:	95 0b       	sbc	r25, r21
 53a:	a6 0b       	sbc	r26, r22
 53c:	b7 0b       	sbc	r27, r23
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	aa 1f       	adc	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	aa 1f       	adc	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <ICU_time.1648>
 572:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <ICU_time.1648+0x1>
 576:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <ICU_time.1648+0x2>
 57a:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <ICU_time.1648+0x3>
		ICU_Cnt=0;
 57e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <ICU_Cnt>
 582:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <ICU_Cnt+0x1>
 586:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <ICU_Cnt+0x2>
 58a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <ICU_Cnt+0x3>
		/******** INT ON ICU ***********/
		SET_BIT(TIMSK,5);
 58e:	89 b7       	in	r24, 0x39	; 57
 590:	80 62       	ori	r24, 0x20	; 32
 592:	89 bf       	out	0x39, r24	; 57
		
	}
	
	return ICU_time;
 594:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <ICU_time.1648>
 598:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <ICU_time.1648+0x1>
 59c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ICU_time.1648+0x2>
 5a0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <ICU_time.1648+0x3>
}
 5a4:	08 95       	ret

000005a6 <IRQH_SetGlobalINT>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void IRQH_Set_callback (uint8 Interrupt_Vector_Index, void(*p)(void)   )
{
	CallBack_PtrFunc[Interrupt_Vector_Index] = p;
 5a6:	88 23       	and	r24, r24
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <IRQH_SetGlobalINT+0x10>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	39 f4       	brne	.+14     	; 0x5bc <IRQH_SetGlobalINT+0x16>
 5ae:	8f b7       	in	r24, 0x3f	; 63
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	8f bf       	out	0x3f, r24	; 63
 5b4:	08 95       	ret
 5b6:	8f b7       	in	r24, 0x3f	; 63
 5b8:	8f 77       	andi	r24, 0x7F	; 127
 5ba:	8f bf       	out	0x3f, r24	; 63
 5bc:	08 95       	ret

000005be <__vector_1>:
}

/********** external INT ************/
ISR(INT0_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	if (CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX] != Null)
 5e0:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <CallBack_PtrFunc>
 5e4:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <CallBack_PtrFunc+0x1>
 5e8:	30 97       	sbiw	r30, 0x00	; 0
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_1+0x30>
	{
		(*CallBack_PtrFunc[External_Interrupt_Request_0_VECTOR_INDEX])();
 5ec:	09 95       	icall
	}
}
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <__vector_16>:

/*********** ADC *****************/
ISR(ADC_vect)
{
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	5f 93       	push	r21
 622:	6f 93       	push	r22
 624:	7f 93       	push	r23
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
		uint32 ADC_Digital_Value=0;
		ADC_Digital_Value=ADC_input_16bit_Access;
 632:	24 b1       	in	r18, 0x04	; 4
 634:	35 b1       	in	r19, 0x05	; 5
		ADC_Vin_Value= ((ADC_Digital_Value *5000) / 1023);
 636:	a8 e8       	ldi	r26, 0x88	; 136
 638:	b3 e1       	ldi	r27, 0x13	; 19
 63a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__umulhisi3>
 63e:	2f ef       	ldi	r18, 0xFF	; 255
 640:	33 e0       	ldi	r19, 0x03	; 3
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 64a:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__data_end>
 64e:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__data_end+0x1>
 652:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__data_end+0x2>
 656:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__data_end+0x3>
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__vector_11>:



/********* Timer0 overflow flag	********/
ISR(TIMER0_OVF_vect)
{
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
			(*CallBack_PtrFunc[Timer_Counter0_Overflow_VECTOR_INDEX])();
			ctr =0 ;
			TCNT0 = Time0_Init_value_g;
		}
	}
}
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_7>:

/******* Timer one CTC *******/
ISR(TIMER1_COMPA_vect)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	static uint8 Counter =0;
	Counter++;
 6b2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Counter.1718>
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
 6b8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Counter.1718>
	if (Counter == 1)
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	39 f4       	brne	.+14     	; 0x6ce <__vector_7+0x3e>
	{
		
		(*CallBack_PtrFunc[Timer_Counter1_Compare_Match_A_VECTOR_INDEX])();
 6c0:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <CallBack_PtrFunc+0xc>
 6c4:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <CallBack_PtrFunc+0xd>
 6c8:	09 95       	icall
		Counter =0 ;
 6ca:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Counter.1718>
	}
}
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_9>:

/************ Timer1 overflow flag********/
ISR(TIMER1_OVF_vect)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
	Time1_OVF_g++;
 702:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <Time1_OVF_g>
 706:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <Time1_OVF_g+0x1>
 70a:	a0 91 c3 00 	lds	r26, 0x00C3	; 0x8000c3 <Time1_OVF_g+0x2>
 70e:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <Time1_OVF_g+0x3>
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	a1 1d       	adc	r26, r1
 716:	b1 1d       	adc	r27, r1
 718:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Time1_OVF_g>
 71c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Time1_OVF_g+0x1>
 720:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <Time1_OVF_g+0x2>
 724:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <Time1_OVF_g+0x3>
}
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <__vector_6>:

ISR(TIMER1_CAPT_vect)
{	
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
	ICU_Cnt++;
 75c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <ICU_Cnt>
 760:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <ICU_Cnt+0x1>
 764:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <ICU_Cnt+0x2>
 768:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <ICU_Cnt+0x3>
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	a1 1d       	adc	r26, r1
 770:	b1 1d       	adc	r27, r1
 772:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <ICU_Cnt>
 776:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <ICU_Cnt+0x1>
 77a:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <ICU_Cnt+0x2>
 77e:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <ICU_Cnt+0x3>
	
	if(ICU_Cnt ==	1)
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	91 05       	cpc	r25, r1
 786:	a1 05       	cpc	r26, r1
 788:	b1 05       	cpc	r27, r1
 78a:	c1 f4       	brne	.+48     	; 0x7bc <__vector_6+0x82>
	{
		CAP1 = ICR1_16Bit_Access;
 78c:	86 b5       	in	r24, 0x26	; 38
 78e:	97 b5       	in	r25, 0x27	; 39
 790:	a0 e0       	ldi	r26, 0x00	; 0
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <CAP1>
 798:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <CAP1+0x1>
 79c:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <CAP1+0x2>
 7a0:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <CAP1+0x3>
		Time1_OVF_g=0;
 7a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <Time1_OVF_g>
 7a8:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <Time1_OVF_g+0x1>
 7ac:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <Time1_OVF_g+0x2>
 7b0:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <Time1_OVF_g+0x3>
		/********* Falling eadge ******/
		CLR_BIT(TCCR1B, 6);
 7b4:	8e b5       	in	r24, 0x2e	; 46
 7b6:	8f 7b       	andi	r24, 0xBF	; 191
 7b8:	8e bd       	out	0x2e, r24	; 46
 7ba:	26 c0       	rjmp	.+76     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	}
	else if (ICU_Cnt ==	2)
 7bc:	02 97       	sbiw	r24, 0x02	; 2
 7be:	a1 05       	cpc	r26, r1
 7c0:	b1 05       	cpc	r27, r1
 7c2:	11 f5       	brne	.+68     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		CAP2 =  ICR1_16Bit_Access	+	(Time1_OVF_g * 65535);
 7c4:	e6 b5       	in	r30, 0x26	; 38
 7c6:	f7 b5       	in	r31, 0x27	; 39
 7c8:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <Time1_OVF_g>
 7cc:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <Time1_OVF_g+0x1>
 7d0:	40 91 c3 00 	lds	r20, 0x00C3	; 0x8000c3 <Time1_OVF_g+0x2>
 7d4:	50 91 c4 00 	lds	r21, 0x00C4	; 0x8000c4 <Time1_OVF_g+0x3>
 7d8:	af ef       	ldi	r26, 0xFF	; 255
 7da:	bf ef       	ldi	r27, 0xFF	; 255
 7dc:	0e 94 6d 06 	call	0xcda	; 0xcda <__muluhisi3>
 7e0:	dc 01       	movw	r26, r24
 7e2:	cb 01       	movw	r24, r22
 7e4:	8e 0f       	add	r24, r30
 7e6:	9f 1f       	adc	r25, r31
 7e8:	a1 1d       	adc	r26, r1
 7ea:	b1 1d       	adc	r27, r1
 7ec:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <CAP2>
 7f0:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <CAP2+0x1>
 7f4:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <CAP2+0x2>
 7f8:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <CAP2+0x3>
		// stop
		SET_BIT(TCCR1B, 6);
 7fc:	8e b5       	in	r24, 0x2e	; 46
 7fe:	80 64       	ori	r24, 0x40	; 64
 800:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TIMSK,5);
 802:	89 b7       	in	r24, 0x39	; 57
 804:	8f 7d       	andi	r24, 0xDF	; 223
 806:	89 bf       	out	0x39, r24	; 57
	}
	
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	bf 91       	pop	r27
 80e:	af 91       	pop	r26
 810:	9f 91       	pop	r25
 812:	8f 91       	pop	r24
 814:	7f 91       	pop	r23
 816:	6f 91       	pop	r22
 818:	5f 91       	pop	r21
 81a:	4f 91       	pop	r20
 81c:	3f 91       	pop	r19
 81e:	2f 91       	pop	r18
 820:	0f 90       	pop	r0
 822:	0f be       	out	0x3f, r0	; 63
 824:	0f 90       	pop	r0
 826:	1f 90       	pop	r1
 828:	18 95       	reti

0000082a <__vector_13>:


/************ UART ************/
ISR(USART_RXC_vect)
{
 82a:	1f 92       	push	r1
 82c:	0f 92       	push	r0
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	0f 92       	push	r0
 832:	11 24       	eor	r1, r1
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	if(CallBack_PtrFunc[USART_Rx_Complete_VECTOR_INDEX] != Null)
 84c:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <CallBack_PtrFunc+0x18>
 850:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <CallBack_PtrFunc+0x19>
 854:	30 97       	sbiw	r30, 0x00	; 0
 856:	09 f0       	breq	.+2      	; 0x85a <__vector_13+0x30>
	{
		(*CallBack_PtrFunc[USART_Rx_Complete_VECTOR_INDEX])();
 858:	09 95       	icall
	}
}
 85a:	ff 91       	pop	r31
 85c:	ef 91       	pop	r30
 85e:	bf 91       	pop	r27
 860:	af 91       	pop	r26
 862:	9f 91       	pop	r25
 864:	8f 91       	pop	r24
 866:	7f 91       	pop	r23
 868:	6f 91       	pop	r22
 86a:	5f 91       	pop	r21
 86c:	4f 91       	pop	r20
 86e:	3f 91       	pop	r19
 870:	2f 91       	pop	r18
 872:	0f 90       	pop	r0
 874:	0f be       	out	0x3f, r0	; 63
 876:	0f 90       	pop	r0
 878:	1f 90       	pop	r1
 87a:	18 95       	reti

0000087c <__vector_15>:

ISR(USART_TXC_vect)
{
 87c:	1f 92       	push	r1
 87e:	0f 92       	push	r0
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	0f 92       	push	r0
 884:	11 24       	eor	r1, r1
 886:	8f 93       	push	r24
	
	TX_STATUS_FLAG =1;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <TX_STATUS_FLAG>
	TX_CNT++;
 88e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <TX_CNT>
 892:	8f 5f       	subi	r24, 0xFF	; 255
 894:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <TX_CNT>
}
 898:	8f 91       	pop	r24
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <PORT_Init>:
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	7e c0       	rjmp	.+252    	; 0x9a4 <PORT_Init+0x100>
 8a8:	e9 2f       	mov	r30, r25
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	ee 0f       	add	r30, r30
 8ae:	ff 1f       	adc	r31, r31
 8b0:	e0 5a       	subi	r30, 0xA0	; 160
 8b2:	ff 4f       	sbci	r31, 0xFF	; 255
 8b4:	80 81       	ld	r24, Z
 8b6:	28 2f       	mov	r18, r24
 8b8:	26 95       	lsr	r18
 8ba:	26 95       	lsr	r18
 8bc:	26 95       	lsr	r18
 8be:	87 70       	andi	r24, 0x07	; 7
 8c0:	31 81       	ldd	r19, Z+1	; 0x01
 8c2:	33 23       	and	r19, r19
 8c4:	b9 f1       	breq	.+110    	; 0x934 <PORT_Init+0x90>
 8c6:	31 30       	cpi	r19, 0x01	; 1
 8c8:	09 f0       	breq	.+2      	; 0x8cc <PORT_Init+0x28>
 8ca:	6b c0       	rjmp	.+214    	; 0x9a2 <PORT_Init+0xfe>
 8cc:	21 30       	cpi	r18, 0x01	; 1
 8ce:	89 f0       	breq	.+34     	; 0x8f2 <PORT_Init+0x4e>
 8d0:	28 f0       	brcs	.+10     	; 0x8dc <PORT_Init+0x38>
 8d2:	22 30       	cpi	r18, 0x02	; 2
 8d4:	c9 f0       	breq	.+50     	; 0x908 <PORT_Init+0x64>
 8d6:	23 30       	cpi	r18, 0x03	; 3
 8d8:	11 f1       	breq	.+68     	; 0x91e <PORT_Init+0x7a>
 8da:	63 c0       	rjmp	.+198    	; 0x9a2 <PORT_Init+0xfe>
 8dc:	4a b3       	in	r20, 0x1a	; 26
 8de:	21 e0       	ldi	r18, 0x01	; 1
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <PORT_Init+0x44>
 8e4:	22 0f       	add	r18, r18
 8e6:	33 1f       	adc	r19, r19
 8e8:	8a 95       	dec	r24
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <PORT_Init+0x40>
 8ec:	24 2b       	or	r18, r20
 8ee:	2a bb       	out	0x1a, r18	; 26
 8f0:	58 c0       	rjmp	.+176    	; 0x9a2 <PORT_Init+0xfe>
 8f2:	47 b3       	in	r20, 0x17	; 23
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <PORT_Init+0x5a>
 8fa:	22 0f       	add	r18, r18
 8fc:	33 1f       	adc	r19, r19
 8fe:	8a 95       	dec	r24
 900:	e2 f7       	brpl	.-8      	; 0x8fa <PORT_Init+0x56>
 902:	24 2b       	or	r18, r20
 904:	27 bb       	out	0x17, r18	; 23
 906:	4d c0       	rjmp	.+154    	; 0x9a2 <PORT_Init+0xfe>
 908:	44 b3       	in	r20, 0x14	; 20
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <PORT_Init+0x70>
 910:	22 0f       	add	r18, r18
 912:	33 1f       	adc	r19, r19
 914:	8a 95       	dec	r24
 916:	e2 f7       	brpl	.-8      	; 0x910 <PORT_Init+0x6c>
 918:	24 2b       	or	r18, r20
 91a:	24 bb       	out	0x14, r18	; 20
 91c:	42 c0       	rjmp	.+132    	; 0x9a2 <PORT_Init+0xfe>
 91e:	41 b3       	in	r20, 0x11	; 17
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <PORT_Init+0x86>
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	8a 95       	dec	r24
 92c:	e2 f7       	brpl	.-8      	; 0x926 <PORT_Init+0x82>
 92e:	24 2b       	or	r18, r20
 930:	21 bb       	out	0x11, r18	; 17
 932:	37 c0       	rjmp	.+110    	; 0x9a2 <PORT_Init+0xfe>
 934:	21 30       	cpi	r18, 0x01	; 1
 936:	91 f0       	breq	.+36     	; 0x95c <PORT_Init+0xb8>
 938:	28 f0       	brcs	.+10     	; 0x944 <PORT_Init+0xa0>
 93a:	22 30       	cpi	r18, 0x02	; 2
 93c:	d9 f0       	breq	.+54     	; 0x974 <PORT_Init+0xd0>
 93e:	23 30       	cpi	r18, 0x03	; 3
 940:	29 f1       	breq	.+74     	; 0x98c <PORT_Init+0xe8>
 942:	2f c0       	rjmp	.+94     	; 0x9a2 <PORT_Init+0xfe>
 944:	4a b3       	in	r20, 0x1a	; 26
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <PORT_Init+0xac>
 94c:	22 0f       	add	r18, r18
 94e:	33 1f       	adc	r19, r19
 950:	8a 95       	dec	r24
 952:	e2 f7       	brpl	.-8      	; 0x94c <PORT_Init+0xa8>
 954:	20 95       	com	r18
 956:	24 23       	and	r18, r20
 958:	2a bb       	out	0x1a, r18	; 26
 95a:	23 c0       	rjmp	.+70     	; 0x9a2 <PORT_Init+0xfe>
 95c:	47 b3       	in	r20, 0x17	; 23
 95e:	21 e0       	ldi	r18, 0x01	; 1
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <PORT_Init+0xc4>
 964:	22 0f       	add	r18, r18
 966:	33 1f       	adc	r19, r19
 968:	8a 95       	dec	r24
 96a:	e2 f7       	brpl	.-8      	; 0x964 <PORT_Init+0xc0>
 96c:	20 95       	com	r18
 96e:	24 23       	and	r18, r20
 970:	27 bb       	out	0x17, r18	; 23
 972:	17 c0       	rjmp	.+46     	; 0x9a2 <PORT_Init+0xfe>
 974:	44 b3       	in	r20, 0x14	; 20
 976:	21 e0       	ldi	r18, 0x01	; 1
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <PORT_Init+0xdc>
 97c:	22 0f       	add	r18, r18
 97e:	33 1f       	adc	r19, r19
 980:	8a 95       	dec	r24
 982:	e2 f7       	brpl	.-8      	; 0x97c <PORT_Init+0xd8>
 984:	20 95       	com	r18
 986:	24 23       	and	r18, r20
 988:	24 bb       	out	0x14, r18	; 20
 98a:	0b c0       	rjmp	.+22     	; 0x9a2 <PORT_Init+0xfe>
 98c:	41 b3       	in	r20, 0x11	; 17
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <PORT_Init+0xf4>
 994:	22 0f       	add	r18, r18
 996:	33 1f       	adc	r19, r19
 998:	8a 95       	dec	r24
 99a:	e2 f7       	brpl	.-8      	; 0x994 <PORT_Init+0xf0>
 99c:	20 95       	com	r18
 99e:	24 23       	and	r18, r20
 9a0:	21 bb       	out	0x11, r18	; 17
 9a2:	9f 5f       	subi	r25, 0xFF	; 255
 9a4:	90 31       	cpi	r25, 0x10	; 16
 9a6:	08 f4       	brcc	.+2      	; 0x9aa <PORT_Init+0x106>
 9a8:	7f cf       	rjmp	.-258    	; 0x8a8 <PORT_Init+0x4>
 9aa:	08 95       	ret

000009ac <SPI_Init>:
 9ac:	8d b1       	in	r24, 0x0d	; 13
 9ae:	80 64       	ori	r24, 0x40	; 64
 9b0:	8d b9       	out	0x0d, r24	; 13
 9b2:	8d b1       	in	r24, 0x0d	; 13
 9b4:	8f 77       	andi	r24, 0x7F	; 127
 9b6:	8d b9       	out	0x0d, r24	; 13
 9b8:	8d b1       	in	r24, 0x0d	; 13
 9ba:	80 62       	ori	r24, 0x20	; 32
 9bc:	8d b9       	out	0x0d, r24	; 13
 9be:	8d b1       	in	r24, 0x0d	; 13
 9c0:	87 7f       	andi	r24, 0xF7	; 247
 9c2:	8d b9       	out	0x0d, r24	; 13
 9c4:	8d b1       	in	r24, 0x0d	; 13
 9c6:	8b 7f       	andi	r24, 0xFB	; 251
 9c8:	8d b9       	out	0x0d, r24	; 13
 9ca:	08 95       	ret

000009cc <SPI_TranSiever>:
 9cc:	8f b9       	out	0x0f, r24	; 15
 9ce:	77 9b       	sbis	0x0e, 7	; 14
 9d0:	fe cf       	rjmp	.-4      	; 0x9ce <SPI_TranSiever+0x2>
 9d2:	8f b1       	in	r24, 0x0f	; 15
 9d4:	08 95       	ret

000009d6 <GPT_Init>:
		#endif  /*#if (Clock_Select ==  No_clock_source )*/
	#endif /*#if (Timer0_State == Timer_Enable)*/	
	
	#if (Timer1_State == Timer_Enable)
		#if (TIMER1_MODE == NORMAL_MODE)
		TCCR1A |= 0X00;
 9d6:	8f b5       	in	r24, 0x2f	; 47
 9d8:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= 0X00;
 9da:	8e b5       	in	r24, 0x2e	; 46
 9dc:	8e bd       	out	0x2e, r24	; 46
		#elif (Timer1_Prescaler ==  prescaler_64 )
		TCCR1B |= 0x03;
		#elif (Timer1_Prescaler ==  prescaler_256 )
		TCCR1B |= 0x04;
		#elif (Timer1_Prescaler ==  prescaler_1024 )
		TCCR1B |= 0x05;
 9de:	8e b5       	in	r24, 0x2e	; 46
 9e0:	85 60       	ori	r24, 0x05	; 5
 9e2:	8e bd       	out	0x2e, r24	; 46
 9e4:	08 95       	ret

000009e6 <__fixunssfsi>:
 9e6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_splitA>
 9ea:	88 f0       	brcs	.+34     	; 0xa0e <__fixunssfsi+0x28>
 9ec:	9f 57       	subi	r25, 0x7F	; 127
 9ee:	98 f0       	brcs	.+38     	; 0xa16 <__fixunssfsi+0x30>
 9f0:	b9 2f       	mov	r27, r25
 9f2:	99 27       	eor	r25, r25
 9f4:	b7 51       	subi	r27, 0x17	; 23
 9f6:	b0 f0       	brcs	.+44     	; 0xa24 <__fixunssfsi+0x3e>
 9f8:	e1 f0       	breq	.+56     	; 0xa32 <__fixunssfsi+0x4c>
 9fa:	66 0f       	add	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	1a f0       	brmi	.+6      	; 0xa0a <__fixunssfsi+0x24>
 a04:	ba 95       	dec	r27
 a06:	c9 f7       	brne	.-14     	; 0x9fa <__fixunssfsi+0x14>
 a08:	14 c0       	rjmp	.+40     	; 0xa32 <__fixunssfsi+0x4c>
 a0a:	b1 30       	cpi	r27, 0x01	; 1
 a0c:	91 f0       	breq	.+36     	; 0xa32 <__fixunssfsi+0x4c>
 a0e:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_zero>
 a12:	b1 e0       	ldi	r27, 0x01	; 1
 a14:	08 95       	ret
 a16:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_zero>
 a1a:	67 2f       	mov	r22, r23
 a1c:	78 2f       	mov	r23, r24
 a1e:	88 27       	eor	r24, r24
 a20:	b8 5f       	subi	r27, 0xF8	; 248
 a22:	39 f0       	breq	.+14     	; 0xa32 <__fixunssfsi+0x4c>
 a24:	b9 3f       	cpi	r27, 0xF9	; 249
 a26:	cc f3       	brlt	.-14     	; 0xa1a <__fixunssfsi+0x34>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b3 95       	inc	r27
 a30:	d9 f7       	brne	.-10     	; 0xa28 <__fixunssfsi+0x42>
 a32:	3e f4       	brtc	.+14     	; 0xa42 <__fixunssfsi+0x5c>
 a34:	90 95       	com	r25
 a36:	80 95       	com	r24
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	8f 4f       	sbci	r24, 0xFF	; 255
 a40:	9f 4f       	sbci	r25, 0xFF	; 255
 a42:	08 95       	ret

00000a44 <__floatunsisf>:
 a44:	e8 94       	clt
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__floatsisf+0x12>

00000a48 <__floatsisf>:
 a48:	97 fb       	bst	r25, 7
 a4a:	3e f4       	brtc	.+14     	; 0xa5a <__floatsisf+0x12>
 a4c:	90 95       	com	r25
 a4e:	80 95       	com	r24
 a50:	70 95       	com	r23
 a52:	61 95       	neg	r22
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	99 23       	and	r25, r25
 a5c:	a9 f0       	breq	.+42     	; 0xa88 <__floatsisf+0x40>
 a5e:	f9 2f       	mov	r31, r25
 a60:	96 e9       	ldi	r25, 0x96	; 150
 a62:	bb 27       	eor	r27, r27
 a64:	93 95       	inc	r25
 a66:	f6 95       	lsr	r31
 a68:	87 95       	ror	r24
 a6a:	77 95       	ror	r23
 a6c:	67 95       	ror	r22
 a6e:	b7 95       	ror	r27
 a70:	f1 11       	cpse	r31, r1
 a72:	f8 cf       	rjmp	.-16     	; 0xa64 <__floatsisf+0x1c>
 a74:	fa f4       	brpl	.+62     	; 0xab4 <__floatsisf+0x6c>
 a76:	bb 0f       	add	r27, r27
 a78:	11 f4       	brne	.+4      	; 0xa7e <__floatsisf+0x36>
 a7a:	60 ff       	sbrs	r22, 0
 a7c:	1b c0       	rjmp	.+54     	; 0xab4 <__floatsisf+0x6c>
 a7e:	6f 5f       	subi	r22, 0xFF	; 255
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	16 c0       	rjmp	.+44     	; 0xab4 <__floatsisf+0x6c>
 a88:	88 23       	and	r24, r24
 a8a:	11 f0       	breq	.+4      	; 0xa90 <__floatsisf+0x48>
 a8c:	96 e9       	ldi	r25, 0x96	; 150
 a8e:	11 c0       	rjmp	.+34     	; 0xab2 <__floatsisf+0x6a>
 a90:	77 23       	and	r23, r23
 a92:	21 f0       	breq	.+8      	; 0xa9c <__floatsisf+0x54>
 a94:	9e e8       	ldi	r25, 0x8E	; 142
 a96:	87 2f       	mov	r24, r23
 a98:	76 2f       	mov	r23, r22
 a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__floatsisf+0x5e>
 a9c:	66 23       	and	r22, r22
 a9e:	71 f0       	breq	.+28     	; 0xabc <__floatsisf+0x74>
 aa0:	96 e8       	ldi	r25, 0x86	; 134
 aa2:	86 2f       	mov	r24, r22
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	2a f0       	brmi	.+10     	; 0xab4 <__floatsisf+0x6c>
 aaa:	9a 95       	dec	r25
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	da f7       	brpl	.-10     	; 0xaaa <__floatsisf+0x62>
 ab4:	88 0f       	add	r24, r24
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__fp_inf>:
 abe:	97 f9       	bld	r25, 7
 ac0:	9f 67       	ori	r25, 0x7F	; 127
 ac2:	80 e8       	ldi	r24, 0x80	; 128
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	08 95       	ret

00000aca <__fp_nan>:
 aca:	9f ef       	ldi	r25, 0xFF	; 255
 acc:	80 ec       	ldi	r24, 0xC0	; 192
 ace:	08 95       	ret

00000ad0 <__fp_pscA>:
 ad0:	00 24       	eor	r0, r0
 ad2:	0a 94       	dec	r0
 ad4:	16 16       	cp	r1, r22
 ad6:	17 06       	cpc	r1, r23
 ad8:	18 06       	cpc	r1, r24
 ada:	09 06       	cpc	r0, r25
 adc:	08 95       	ret

00000ade <__fp_pscB>:
 ade:	00 24       	eor	r0, r0
 ae0:	0a 94       	dec	r0
 ae2:	12 16       	cp	r1, r18
 ae4:	13 06       	cpc	r1, r19
 ae6:	14 06       	cpc	r1, r20
 ae8:	05 06       	cpc	r0, r21
 aea:	08 95       	ret

00000aec <__fp_round>:
 aec:	09 2e       	mov	r0, r25
 aee:	03 94       	inc	r0
 af0:	00 0c       	add	r0, r0
 af2:	11 f4       	brne	.+4      	; 0xaf8 <__fp_round+0xc>
 af4:	88 23       	and	r24, r24
 af6:	52 f0       	brmi	.+20     	; 0xb0c <__fp_round+0x20>
 af8:	bb 0f       	add	r27, r27
 afa:	40 f4       	brcc	.+16     	; 0xb0c <__fp_round+0x20>
 afc:	bf 2b       	or	r27, r31
 afe:	11 f4       	brne	.+4      	; 0xb04 <__fp_round+0x18>
 b00:	60 ff       	sbrs	r22, 0
 b02:	04 c0       	rjmp	.+8      	; 0xb0c <__fp_round+0x20>
 b04:	6f 5f       	subi	r22, 0xFF	; 255
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	08 95       	ret

00000b0e <__fp_split3>:
 b0e:	57 fd       	sbrc	r21, 7
 b10:	90 58       	subi	r25, 0x80	; 128
 b12:	44 0f       	add	r20, r20
 b14:	55 1f       	adc	r21, r21
 b16:	59 f0       	breq	.+22     	; 0xb2e <__fp_splitA+0x10>
 b18:	5f 3f       	cpi	r21, 0xFF	; 255
 b1a:	71 f0       	breq	.+28     	; 0xb38 <__fp_splitA+0x1a>
 b1c:	47 95       	ror	r20

00000b1e <__fp_splitA>:
 b1e:	88 0f       	add	r24, r24
 b20:	97 fb       	bst	r25, 7
 b22:	99 1f       	adc	r25, r25
 b24:	61 f0       	breq	.+24     	; 0xb3e <__fp_splitA+0x20>
 b26:	9f 3f       	cpi	r25, 0xFF	; 255
 b28:	79 f0       	breq	.+30     	; 0xb48 <__fp_splitA+0x2a>
 b2a:	87 95       	ror	r24
 b2c:	08 95       	ret
 b2e:	12 16       	cp	r1, r18
 b30:	13 06       	cpc	r1, r19
 b32:	14 06       	cpc	r1, r20
 b34:	55 1f       	adc	r21, r21
 b36:	f2 cf       	rjmp	.-28     	; 0xb1c <__fp_split3+0xe>
 b38:	46 95       	lsr	r20
 b3a:	f1 df       	rcall	.-30     	; 0xb1e <__fp_splitA>
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <__fp_splitA+0x30>
 b3e:	16 16       	cp	r1, r22
 b40:	17 06       	cpc	r1, r23
 b42:	18 06       	cpc	r1, r24
 b44:	99 1f       	adc	r25, r25
 b46:	f1 cf       	rjmp	.-30     	; 0xb2a <__fp_splitA+0xc>
 b48:	86 95       	lsr	r24
 b4a:	71 05       	cpc	r23, r1
 b4c:	61 05       	cpc	r22, r1
 b4e:	08 94       	sec
 b50:	08 95       	ret

00000b52 <__fp_zero>:
 b52:	e8 94       	clt

00000b54 <__fp_szero>:
 b54:	bb 27       	eor	r27, r27
 b56:	66 27       	eor	r22, r22
 b58:	77 27       	eor	r23, r23
 b5a:	cb 01       	movw	r24, r22
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret

00000b60 <__mulsf3>:
 b60:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3x>
 b64:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_round>
 b68:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_pscA>
 b6c:	38 f0       	brcs	.+14     	; 0xb7c <__mulsf3+0x1c>
 b6e:	0e 94 6f 05 	call	0xade	; 0xade <__fp_pscB>
 b72:	20 f0       	brcs	.+8      	; 0xb7c <__mulsf3+0x1c>
 b74:	95 23       	and	r25, r21
 b76:	11 f0       	breq	.+4      	; 0xb7c <__mulsf3+0x1c>
 b78:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_inf>
 b7c:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_nan>
 b80:	11 24       	eor	r1, r1
 b82:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_szero>

00000b86 <__mulsf3x>:
 b86:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_split3>
 b8a:	70 f3       	brcs	.-36     	; 0xb68 <__mulsf3+0x8>

00000b8c <__mulsf3_pse>:
 b8c:	95 9f       	mul	r25, r21
 b8e:	c1 f3       	breq	.-16     	; 0xb80 <__mulsf3+0x20>
 b90:	95 0f       	add	r25, r21
 b92:	50 e0       	ldi	r21, 0x00	; 0
 b94:	55 1f       	adc	r21, r21
 b96:	62 9f       	mul	r22, r18
 b98:	f0 01       	movw	r30, r0
 b9a:	72 9f       	mul	r23, r18
 b9c:	bb 27       	eor	r27, r27
 b9e:	f0 0d       	add	r31, r0
 ba0:	b1 1d       	adc	r27, r1
 ba2:	63 9f       	mul	r22, r19
 ba4:	aa 27       	eor	r26, r26
 ba6:	f0 0d       	add	r31, r0
 ba8:	b1 1d       	adc	r27, r1
 baa:	aa 1f       	adc	r26, r26
 bac:	64 9f       	mul	r22, r20
 bae:	66 27       	eor	r22, r22
 bb0:	b0 0d       	add	r27, r0
 bb2:	a1 1d       	adc	r26, r1
 bb4:	66 1f       	adc	r22, r22
 bb6:	82 9f       	mul	r24, r18
 bb8:	22 27       	eor	r18, r18
 bba:	b0 0d       	add	r27, r0
 bbc:	a1 1d       	adc	r26, r1
 bbe:	62 1f       	adc	r22, r18
 bc0:	73 9f       	mul	r23, r19
 bc2:	b0 0d       	add	r27, r0
 bc4:	a1 1d       	adc	r26, r1
 bc6:	62 1f       	adc	r22, r18
 bc8:	83 9f       	mul	r24, r19
 bca:	a0 0d       	add	r26, r0
 bcc:	61 1d       	adc	r22, r1
 bce:	22 1f       	adc	r18, r18
 bd0:	74 9f       	mul	r23, r20
 bd2:	33 27       	eor	r19, r19
 bd4:	a0 0d       	add	r26, r0
 bd6:	61 1d       	adc	r22, r1
 bd8:	23 1f       	adc	r18, r19
 bda:	84 9f       	mul	r24, r20
 bdc:	60 0d       	add	r22, r0
 bde:	21 1d       	adc	r18, r1
 be0:	82 2f       	mov	r24, r18
 be2:	76 2f       	mov	r23, r22
 be4:	6a 2f       	mov	r22, r26
 be6:	11 24       	eor	r1, r1
 be8:	9f 57       	subi	r25, 0x7F	; 127
 bea:	50 40       	sbci	r21, 0x00	; 0
 bec:	9a f0       	brmi	.+38     	; 0xc14 <__mulsf3_pse+0x88>
 bee:	f1 f0       	breq	.+60     	; 0xc2c <__mulsf3_pse+0xa0>
 bf0:	88 23       	and	r24, r24
 bf2:	4a f0       	brmi	.+18     	; 0xc06 <__mulsf3_pse+0x7a>
 bf4:	ee 0f       	add	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	bb 1f       	adc	r27, r27
 bfa:	66 1f       	adc	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	91 50       	subi	r25, 0x01	; 1
 c02:	50 40       	sbci	r21, 0x00	; 0
 c04:	a9 f7       	brne	.-22     	; 0xbf0 <__mulsf3_pse+0x64>
 c06:	9e 3f       	cpi	r25, 0xFE	; 254
 c08:	51 05       	cpc	r21, r1
 c0a:	80 f0       	brcs	.+32     	; 0xc2c <__mulsf3_pse+0xa0>
 c0c:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_inf>
 c10:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_szero>
 c14:	5f 3f       	cpi	r21, 0xFF	; 255
 c16:	e4 f3       	brlt	.-8      	; 0xc10 <__mulsf3_pse+0x84>
 c18:	98 3e       	cpi	r25, 0xE8	; 232
 c1a:	d4 f3       	brlt	.-12     	; 0xc10 <__mulsf3_pse+0x84>
 c1c:	86 95       	lsr	r24
 c1e:	77 95       	ror	r23
 c20:	67 95       	ror	r22
 c22:	b7 95       	ror	r27
 c24:	f7 95       	ror	r31
 c26:	e7 95       	ror	r30
 c28:	9f 5f       	subi	r25, 0xFF	; 255
 c2a:	c1 f7       	brne	.-16     	; 0xc1c <__mulsf3_pse+0x90>
 c2c:	fe 2b       	or	r31, r30
 c2e:	88 0f       	add	r24, r24
 c30:	91 1d       	adc	r25, r1
 c32:	96 95       	lsr	r25
 c34:	87 95       	ror	r24
 c36:	97 f9       	bld	r25, 7
 c38:	08 95       	ret

00000c3a <__udivmodsi4>:
 c3a:	a1 e2       	ldi	r26, 0x21	; 33
 c3c:	1a 2e       	mov	r1, r26
 c3e:	aa 1b       	sub	r26, r26
 c40:	bb 1b       	sub	r27, r27
 c42:	fd 01       	movw	r30, r26
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <__udivmodsi4_ep>

00000c46 <__udivmodsi4_loop>:
 c46:	aa 1f       	adc	r26, r26
 c48:	bb 1f       	adc	r27, r27
 c4a:	ee 1f       	adc	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	a2 17       	cp	r26, r18
 c50:	b3 07       	cpc	r27, r19
 c52:	e4 07       	cpc	r30, r20
 c54:	f5 07       	cpc	r31, r21
 c56:	20 f0       	brcs	.+8      	; 0xc60 <__udivmodsi4_ep>
 c58:	a2 1b       	sub	r26, r18
 c5a:	b3 0b       	sbc	r27, r19
 c5c:	e4 0b       	sbc	r30, r20
 c5e:	f5 0b       	sbc	r31, r21

00000c60 <__udivmodsi4_ep>:
 c60:	66 1f       	adc	r22, r22
 c62:	77 1f       	adc	r23, r23
 c64:	88 1f       	adc	r24, r24
 c66:	99 1f       	adc	r25, r25
 c68:	1a 94       	dec	r1
 c6a:	69 f7       	brne	.-38     	; 0xc46 <__udivmodsi4_loop>
 c6c:	60 95       	com	r22
 c6e:	70 95       	com	r23
 c70:	80 95       	com	r24
 c72:	90 95       	com	r25
 c74:	9b 01       	movw	r18, r22
 c76:	ac 01       	movw	r20, r24
 c78:	bd 01       	movw	r22, r26
 c7a:	cf 01       	movw	r24, r30
 c7c:	08 95       	ret

00000c7e <__divmodsi4>:
 c7e:	05 2e       	mov	r0, r21
 c80:	97 fb       	bst	r25, 7
 c82:	1e f4       	brtc	.+6      	; 0xc8a <__divmodsi4+0xc>
 c84:	00 94       	com	r0
 c86:	0e 94 56 06 	call	0xcac	; 0xcac <__negsi2>
 c8a:	57 fd       	sbrc	r21, 7
 c8c:	07 d0       	rcall	.+14     	; 0xc9c <__divmodsi4_neg2>
 c8e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 c92:	07 fc       	sbrc	r0, 7
 c94:	03 d0       	rcall	.+6      	; 0xc9c <__divmodsi4_neg2>
 c96:	4e f4       	brtc	.+18     	; 0xcaa <__divmodsi4_exit>
 c98:	0c 94 56 06 	jmp	0xcac	; 0xcac <__negsi2>

00000c9c <__divmodsi4_neg2>:
 c9c:	50 95       	com	r21
 c9e:	40 95       	com	r20
 ca0:	30 95       	com	r19
 ca2:	21 95       	neg	r18
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	4f 4f       	sbci	r20, 0xFF	; 255
 ca8:	5f 4f       	sbci	r21, 0xFF	; 255

00000caa <__divmodsi4_exit>:
 caa:	08 95       	ret

00000cac <__negsi2>:
 cac:	90 95       	com	r25
 cae:	80 95       	com	r24
 cb0:	70 95       	com	r23
 cb2:	61 95       	neg	r22
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255
 cb6:	8f 4f       	sbci	r24, 0xFF	; 255
 cb8:	9f 4f       	sbci	r25, 0xFF	; 255
 cba:	08 95       	ret

00000cbc <__umulhisi3>:
 cbc:	a2 9f       	mul	r26, r18
 cbe:	b0 01       	movw	r22, r0
 cc0:	b3 9f       	mul	r27, r19
 cc2:	c0 01       	movw	r24, r0
 cc4:	a3 9f       	mul	r26, r19
 cc6:	70 0d       	add	r23, r0
 cc8:	81 1d       	adc	r24, r1
 cca:	11 24       	eor	r1, r1
 ccc:	91 1d       	adc	r25, r1
 cce:	b2 9f       	mul	r27, r18
 cd0:	70 0d       	add	r23, r0
 cd2:	81 1d       	adc	r24, r1
 cd4:	11 24       	eor	r1, r1
 cd6:	91 1d       	adc	r25, r1
 cd8:	08 95       	ret

00000cda <__muluhisi3>:
 cda:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__umulhisi3>
 cde:	a5 9f       	mul	r26, r21
 ce0:	90 0d       	add	r25, r0
 ce2:	b4 9f       	mul	r27, r20
 ce4:	90 0d       	add	r25, r0
 ce6:	a4 9f       	mul	r26, r20
 ce8:	80 0d       	add	r24, r0
 cea:	91 1d       	adc	r25, r1
 cec:	11 24       	eor	r1, r1
 cee:	08 95       	ret

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
